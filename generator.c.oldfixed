#include "sgensys.h"
#include "osc.h"
#include "env.h"
#include "program.h"
#include <stdio.h>
#include <stdlib.h>

typedef struct IndexNode {
  void *node;
  int pos; /* negative for delay/time shift */
  uchar type, flag;
  int ref; /* for set nodes, id of node set; for nested, id of parent */
} IndexNode;

typedef struct SoundNode {
  uint time;
  uchar type, attr, mode;
  float freq, dynfreq;
  struct SoundNode *fmodchain;
  struct SoundNode *pmodchain;
  short *osctype;
  SGSOsc osc;
  float amp, dynampdiff;
  struct SoundNode *amodchain;
  struct SoundNode *link;
} SoundNode;

typedef union Data {
  int i;
  float f;
} Data;

typedef struct SetNode {
  uchar values, mods;
  Data data[1]; /* sized for number of things set */
} SetNode;

static uint count_flags(uint flags) {
  uint i, count = 0;
  for (i = 0; i < (8 * sizeof(uint)); ++i) {
    if (flags & 1) ++count;
    flags >>= 1;
  }
  return count;
}

#define BUF_LEN 256
typedef Data Buf[BUF_LEN];

#define NO_DELAY_OFFS (0x80000000)
struct SGSGenerator {
  uint srate;
  Buf *bufs;
  uint bufc;
  double osc_coeff;
  int delay_offs;
  uint node, nodec;
  IndexNode nodes[1]; /* sized to number of nodes */
  /* actual nodes of varying type stored here */
};

static uint calc_bufs(SoundNode *n) {
  uint count = 0;
  do {
    uint i = 1;
    if (n->fmodchain) i += calc_bufs(n->fmodchain);
    if (n->pmodchain) i += calc_bufs(n->pmodchain);
    if (n->amodchain) i += calc_bufs(n->amodchain);
    if (!n->link && i > 1)
      --i; /* match buf-use optimization */
    if (i > count)
      count = i;
  } while ((n = n->link));
  return count;
}

static void upsize_bufs(SGSGenerator *o, SoundNode *n) {
  uint count = calc_bufs(n);
  if (count > o->bufc) {
    o->bufs = realloc(o->bufs, sizeof(Buf) * count);
    o->bufc = count;
  }
}

SGSGenerator* SGSGenerator_create(uint srate, struct SGSProgram *prg) {
  SGSGenerator *o;
  SGSProgramNode *step;
  void *data;
  uint i, size, indexsize, nodessize;
  size = sizeof(SGSGenerator) - sizeof(IndexNode);
  indexsize = sizeof(IndexNode) * prg->nodec;
  nodessize = 0;
  for (step = prg->nodelist; step; step = step->next) {
    if (step->type == SGS_TYPE_TOP ||
        step->type == SGS_TYPE_NESTED)
      nodessize += sizeof(SoundNode);
    else if (step->type == SGS_TYPE_SETTOP ||
             step->type == SGS_TYPE_SETNESTED)
      nodessize += sizeof(SetNode) +
                   (sizeof(Data) *
                    (count_flags((step->spec.set.values << 8) |
                                 step->spec.set.mods) - 1));
  }
  o = calloc(1, size + indexsize + nodessize);
  o->srate = srate;
  o->osc_coeff = SGSOsc_COEFF(srate);
  o->node = 0;
  o->nodec = prg->topc; /* only loop top-level nodes */
  data = (void*)(((uchar*)o) + size + indexsize);
  SGSOsc_init();
  step = prg->nodelist;
  for (i = 0; i < prg->nodec; ++i) {
    IndexNode *in = &o->nodes[i];
    uint delay = step->delay * srate;
    in->node = data;
    in->pos = -delay;
    in->type = step->type;
    in->flag = step->flag;
    if (step->type == SGS_TYPE_TOP ||
        step->type == SGS_TYPE_NESTED) {
      SoundNode *n = data;
      uint time = step->time * srate;
      in->ref = -1;
      n->time = time;
      switch (step->wave) {
      case SGS_WAVE_SIN:
        n->osctype = SGSOsc_sin;
        break;
      case SGS_WAVE_SQR:
        n->osctype = SGSOsc_sqr;
        break;
      case SGS_WAVE_TRI:
        n->osctype = SGSOsc_tri;
        break;
      case SGS_WAVE_SAW:
        n->osctype = SGSOsc_saw;
        break;
      }
      n->attr = step->attr;
      n->mode = step->mode;
      n->amp = step->amp;
      n->dynampdiff = step->dynamp - step->amp;
      n->freq = step->freq;
      n->dynfreq = step->dynfreq;
      SGSOsc_SET_PHASE(&n->osc, SGSOsc_PHASE(step->phase));
      /* mods init part one - replaced with proper entries next loop */
      n->amodchain = (void*)step->amod.chain;
      n->fmodchain = (void*)step->fmod.chain;
      n->pmodchain = (void*)step->pmod.chain;
      n->link = (void*)step->spec.nested.link;
      data = (void*)(((uchar*)data) + sizeof(SoundNode));
    } else if (step->type == SGS_TYPE_SETTOP ||
               step->type == SGS_TYPE_SETNESTED) {
      SetNode *n = data;
      Data *set = n->data;
      SGSProgramNode *ref = step->spec.set.ref;
      in->ref = ref->id;
      if (ref->type == SGS_TYPE_NESTED)
        in->ref += prg->topc;
      n->values = step->spec.set.values;
      n->values &= ~SGS_DYNAMP;
      n->mods = step->spec.set.mods;
      if (n->values & SGS_TIME) {
        (*set).i = step->time * srate; ++set;
      }
      if (n->values & SGS_FREQ) {
        (*set).f = step->freq; ++set;
      }
      if (n->values & SGS_DYNFREQ) {
        (*set).f = step->dynfreq; ++set;
      }
      if (n->values & SGS_PHASE) {
        (*set).i = SGSOsc_PHASE(step->phase); ++set;
      }
      if (n->values & SGS_AMP) {
        (*set).f = step->amp; ++set;
      }
      if ((step->dynamp - step->amp) != (ref->dynamp - ref->amp)) {
        (*set).f = (step->dynamp - step->amp); ++set;
        n->values |= SGS_DYNAMP;
      }
      if (n->values & SGS_ATTR) {
        (*set).i = step->attr; ++set;
      }
      if (n->mods & SGS_AMODS) {
        (*set).i = step->amod.chain->id + prg->topc;
        ++set;
      }
      if (n->mods & SGS_FMODS) {
        (*set).i = step->fmod.chain->id + prg->topc;
        ++set;
      }
      if (n->mods & SGS_PMODS) {
        (*set).i = step->pmod.chain->id + prg->topc;
        ++set;
      }
      data = (void*)(((uchar*)data) +
                     sizeof(SetNode) +
                     (sizeof(Data) *
                      (count_flags((step->spec.set.values << 8) |
                                   step->spec.set.mods) - 1)));
    }
    step = step->next;
  }
  /* mods init part two - give proper entries */
  for (i = 0; i < prg->nodec; ++i) {
    IndexNode *in = &o->nodes[i];
    if (in->type == SGS_TYPE_TOP ||
        in->type == SGS_TYPE_NESTED) {
      SoundNode *n = in->node;
      if (n->amodchain) {
        uint id = ((SGSProgramNode*)n->amodchain)->id + prg->topc;
        n->amodchain = o->nodes[id].node;
        o->nodes[id].ref = i;
      }
      if (n->fmodchain) {
        uint id = ((SGSProgramNode*)n->fmodchain)->id + prg->topc;
        n->fmodchain = o->nodes[id].node;
        o->nodes[id].ref = i;
      }
      if (n->pmodchain) {
        uint id = ((SGSProgramNode*)n->pmodchain)->id + prg->topc;
        n->pmodchain = o->nodes[id].node;
        o->nodes[id].ref = i;
      }
      if (n->link) {
        uint id = ((SGSProgramNode*)n->link)->id + prg->topc;
        n->link = o->nodes[id].node;
      }
    }
  }
  return o;
}

static void adjust_time(SGSGenerator *o, SoundNode *n) {
  int pos_offs;
  /* click reduction: increase time to make it end at wave cycle's end */
  SGSOsc_WAVE_OFFS(&n->osc, o->osc_coeff, n->freq, n->time, pos_offs);
  n->time -= pos_offs;
  if ((uint)o->delay_offs == NO_DELAY_OFFS || o->delay_offs > pos_offs)
    o->delay_offs = pos_offs;
}

static void SGSGenerator_enter_node(SGSGenerator *o, IndexNode *in) {
  switch (in->type) {
  case SGS_TYPE_TOP:
    upsize_bufs(o, in->node);
    adjust_time(o, in->node);
  case SGS_TYPE_NESTED:
    break;
  case SGS_TYPE_SETTOP:
  case SGS_TYPE_SETNESTED: {
    IndexNode *refin = &o->nodes[in->ref];
    SoundNode *refn = refin->node;
    SetNode *setn = in->node;
    Data *data = setn->data;
    uchar adjtime = 0;
    /* set state */
    if (setn->values & SGS_TIME) {
      refn->time = (*data).i; ++data;
      refin->pos = 0;
      if (refn->time) {
        if (refin->type == SGS_TYPE_TOP)
          refin->flag |= SGS_FLAG_EXEC;
        adjtime = 1;
      } else
        refin->flag &= ~SGS_FLAG_EXEC;
    }
    if (setn->values & SGS_FREQ) {
      refn->freq = (*data).f; ++data;
      adjtime = 1;
    }
    if (setn->values & SGS_DYNFREQ) {
      refn->dynfreq = (*data).f; ++data;
    }
    if (setn->values & SGS_PHASE) {
      SGSOsc_SET_PHASE(&refn->osc, (uint)(*data).i); ++data;
    }
    if (setn->values & SGS_AMP) {
      refn->amp = (*data).f; ++data;
    }
    if (setn->values & SGS_DYNAMP) {
      refn->dynampdiff = (*data).f; ++data;
    }
    if (setn->values & SGS_ATTR) {
      refn->attr = (uchar)(*data).i; ++data;
    }
    if (setn->mods & SGS_AMODS) {
      refn->amodchain = o->nodes[(*data).i].node; ++data;
    }
    if (setn->mods & SGS_FMODS) {
      refn->fmodchain = o->nodes[(*data).i].node; ++data;
    }
    if (setn->mods & SGS_PMODS) {
      refn->pmodchain = o->nodes[(*data).i].node; ++data;
    }
    if (refn->type == SGS_TYPE_TOP) {
      upsize_bufs(o, refn);
      if (adjtime) /* here so new freq also used if set */
        adjust_time(o, refn);
    } else {
      IndexNode *topin = refin;
      while (topin->ref > -1)
        topin = &o->nodes[topin->ref];
      upsize_bufs(o, topin->node);
    }
    /* take over place of ref'd node */
    *in = *refin;
    refin->flag &= ~SGS_FLAG_EXEC;
    break; }
  case SGS_TYPE_ENV:
    break;
  }
  in->flag |= SGS_FLAG_ENTERED;
}

void SGSGenerator_destroy(SGSGenerator *o) {
  free(o->bufs);
  free(o);
}

/*
 * node block processing
 */

static void run_block(Buf *bufs, uint len, SoundNode *n, float parentfreq, Buf *parentfreqbuf, double osc_coeff, uchar waveenv) {
  uint i, acc = 0;
  float freq, amp, fm = 0.f, am = 0.f;
  int pm;
  Buf *nextbuf, *ambuf, *freqbuf, *pmbuf;
  nextbuf = bufs;
BEGIN:
  freq = n->freq;
  amp = n->amp;
  freqbuf = 0;
  if (n->attr & SGS_ATTR_FREQRATIO) {
    if (!parentfreqbuf)
      freq *= parentfreq;
    else {
      freqbuf = nextbuf++;
      for (i = 0; i < len; ++i)
        (*freqbuf)[i].f = freq * (*parentfreqbuf)[i].f;
    }
  }
  if (n->fmodchain) {
    Buf *fmbuf = nextbuf;
    run_block(fmbuf, len, n->fmodchain, freq, freqbuf, osc_coeff, 1);
    if (!freqbuf) {
      float fm = n->dynfreq;
      if (n->attr & SGS_ATTR_DYNFREQRATIO)
        fm *= parentfreq;
      fm -= freq;
      for (i = 0; i < len; ++i)
        (*fmbuf)[i].f = fm * (*fmbuf)[i].f + freq;
      freqbuf = fmbuf;
      ++nextbuf;
    } else {
      if (n->attr & SGS_ATTR_DYNFREQRATIO) {
        for (i = 0; i < len; ++i)
          (*freqbuf)[i].f += ((n->dynfreq * (*parentfreqbuf)[i].f) - (*freqbuf)[i].f) * (*fmbuf)[i].f;
      } else {
        for (i = 0; i < len; ++i)
          (*freqbuf)[i].f += (n->dynfreq - (*freqbuf)[i].f) * (*fmbuf)[i].f;
      }
    }
  }
  pmbuf = 0;
  if (n->pmodchain) {
    pmbuf = nextbuf++;
    run_block(pmbuf, len, n->pmodchain, freq, freqbuf, osc_coeff, 0);
  }
  ambuf = 0;
  if (n->amodchain) {
    ambuf = nextbuf++;
    am = n->dynampdiff;
    run_block(ambuf, len, n->fmodchain, freq, freqbuf, osc_coeff, 1);
  }
  for (i = 0; i < len; ++i) {
    float curfreq;
    curfreq = freq;
    if (freqbuf)
      curfreq = (*freqbuf)[i].f;
    pm = 0;
    if (pmbuf)
      pm = (*pmbuf)[i].i;
    if (waveenv) {
      float s;
      SGSOsc_RUN_PM_ENVO(&n->osc, n->osctype, osc_coeff, curfreq, pm, s);
      if (acc)
        (*bufs)[i].f *= s;
      else
        (*bufs)[i].f = s;
    } else {
      int s;
      float curamp;
      curamp = amp;
      if (ambuf)
        curamp += am * (*ambuf)[i].f;
      SGSOsc_RUN_PM(&n->osc, n->osctype, osc_coeff, curfreq, pm, curamp, s);
      if (acc)
        (*bufs)[i].i += s;
      else
        (*bufs)[i].i = s;
    }
  }
  if (n->link) {
    acc = 1;
    n = n->link;
    nextbuf = bufs+1; /* need separate accumulating or multiplying buf */
    goto BEGIN;
  }
}

static uint run_node(SGSGenerator *o, SoundNode *n, short *sp, uint pos, uint len) {
  double osc_coeff = o->osc_coeff;
  uint i, ret, time = n->time - pos;
  if (time > len)
    time = len;
  ret = time;
  if (n->mode == SGS_MODE_RIGHT) ++sp;
  do {
    len = BUF_LEN;
    if (len > time)
      len = time;
    time -= len;
    run_block(o->bufs, len, n, /* dummy */0.f, 0, osc_coeff, 0);
    for (i = 0; i < len; ++i, sp += 2) {
      int s = (*o->bufs)[i].i;
      sp[0] += s;
      if (n->mode == SGS_MODE_CENTER)
        sp[1] += s;
    }
  } while (time);
  return ret;
}

/*
 * main run-function
 */

uchar SGSGenerator_run(SGSGenerator *o, short *buf, uint len) {
  short *sp;
  uint i, skiplen;
  sp = buf;
  for (i = len; i--; sp += 2) {
    sp[0] = 0;
    sp[1] = 0;
  }
PROCESS:
  skiplen = 0;
  for (i = o->node; i < o->nodec; ++i) {
    IndexNode *in = &o->nodes[i];
    if (in->pos < 0) {
      uint delay = -in->pos;
      if ((uint)o->delay_offs != NO_DELAY_OFFS)
        delay -= o->delay_offs; /* delay inc == previous time inc */
      if (delay <= len) {
        /* Split processing so that len is no longer than delay, avoiding
         * cases where the node prior to a node disabling it plays too
         * long.
         */
        skiplen = len - delay;
        len = delay;
      }
      break;
    }
    if (!(in->flag & SGS_FLAG_ENTERED))
      /* After return to PROCESS, ensures disabling node is initialized before
       * disabled node would otherwise play.
       */
      SGSGenerator_enter_node(o, in);
  }
  for (i = o->node; i < o->nodec; ++i) {
    IndexNode *in = &o->nodes[i];
    if (in->pos < 0) {
      uint delay = -in->pos;
      if ((uint)o->delay_offs != NO_DELAY_OFFS) {
        in->pos += o->delay_offs; /* delay inc == previous time inc */
        o->delay_offs = NO_DELAY_OFFS;
      }
      if (delay >= len) {
        in->pos += len;
        break; /* end for now; delays accumulate across nodes */
      }
      buf += delay+delay; /* doubled due to stereo interleaving */
      len -= delay;
      in->pos = 0;
    } else
    if (!(in->flag & SGS_FLAG_ENTERED))
      SGSGenerator_enter_node(o, in);
    if (in->flag & SGS_FLAG_EXEC) {
      SoundNode *n = in->node;
      in->pos += run_node(o, n, buf, in->pos, len);
      if ((uint)in->pos == n->time)
        in->flag &= ~SGS_FLAG_EXEC;
    }
  }
  if (skiplen) {
    buf += len+len; /* doubled due to stereo interleaving */
    len = skiplen;
    goto PROCESS;
  }
  for(;;) {
    if (o->node == o->nodec)
      return 0;
    if (o->nodes[o->node].flag & SGS_FLAG_EXEC)
      break;
    ++o->node;
  }
  return 1;
}
