sgensys is the Sound GENeration SYStem, a sound synthesis program developed
to be usable for musical purposes, as well as capable of generating all manner
of sounds; it will read a script file of its SGS (Sound Generation Script)
format and produce audio output; once more developed, writing to audio files
will also be implemented.

Script syntax overview:

Operators are oscillators that may be freely linked in any number of
configurations as carriers and modulators, each having a number of parameters.
They, along with their timing relative to each other, are the main objects
described by the script syntax.

When specified - or later referenced - operators are optionally followed by
arguments for its parameters. Other kinds of modifiers also exist that affect
operators but having other syntactical rules; such are used to affect the
relative timing of operators and their changes. These changes - including
setting the initial state - are grouped into "steps", each having its specific
target as well as location in time.

a new step terminating the previous one. (on the topmost script
scope, newlines also terminate steps; scope nesting - see below - allows
exceptions. this allows multiple steps on one line; in short, it is always
possible to omit newlines, but not to insert them everywhere)

Whitespace is not allowed within multi-character names or keywords, such as
sin, tri. Nor is it allowed within numbers. Apart from this, spaces and tabs
may be freely placed, or - not recommended - omitted.

When a numerical expression is given for a parameter, specifying it within
parentheses will make the syntax freer, allowing whitespace to be freely
placed; outside parentheses, whitespace will terminate the expression.

< and > allow nesting of scope; the scope prior to the < returns upon the >.
For the top-level scope, each line is considered a sub-scope, so the present
list of steps will end with it. Nesting scopes with < and >, the sub-scope is
not line-dependent, and the list of steps will continue for the remainder of
the scope. Individual steps are still line-bound, though the last one
preceding a < on its line will be returned to after the >.

Parameters with nesting use { and } instead, differentiating the two, though
such nesting also allows newlines.

The following main keywords - and sub-keywords - are supported:

S:
	Set argument defaults and parameter modifiers. (referred to as
	S default values)
	f, r, t	Set default values for parameters f (default 100),
		r (default 1), t (default 1).
	a	Sets a multiplier for the amplitude for all non-modulator
		waves; effectively a volume control for the combined output.
	n	Sets A4 tuning (default 444) for frequencies specified as
		notes.

Osin, Osrs, Otri, Osqr, Osaw:
	Specify operator - and if top-level, play - with wave type set to
	either sine, square root of sine, triangle, square or saw wave.
	When specified or later referenced, operators support the
	following parameters:
	t	Time duration in seconds. If no t setting is given, the time
		set depends on the context.
			If there are several operators simultaneously given
		(ie. in succession, ending with the next |), the time, where
		not otherwise determined, is fitted to the combined duration of
		their play; otherwise, the S default value is used. (t* can
		also be used to specify this explicitly)
			For nested operators, ie. modulators, the default time
		is infinite (can also be given as ti), meaning they play
		whenever a carrier they are linked to does. Infinite duration
		is only supported for nested operators, all scripts having
		finite duration.
			For a composite step, the first part is given the
		S default value if none set. The following parts will each in
		turn be given the value of the preceding part if not explicitly
		set - with the exception for nested operators of the last
		part, which will have infinite time (ti) by default.
	f	Frequency in Hz. Notes may also be specified in justly intoned
		C-major scale; optional subnote (c, d, e, f, g, a or b) inside
		inner octave (between note and next note), then note (C, D, E,
		F, G, A or B), then optionally s (sharp) or f (flat), then
		optionally (default 4) the octave of the note (0-10).
			Gradual value adjustment also supported; see section.
	f!<>	Second frequency in Hz to modulate (FM) to by wave or envelope,
		and/or a list of modulators given within the <> following the
		number if given. This list replaces any previous FM modulators
		set, and may be empty.
			The per-sample product of the modulator amplitudes is
		used to frequency-modulate the carrier(s), be they the final
		carrier(s) or in turn modulator(s) for one or more other
		carrier(s).
	r	Frequency ratio (modulator waves only) of carrier to modulator.
		Keeps frequency that of the carrier divided by the given
		number. Often used in the form r(n/m) to give an n:m ratio.
			Gradual value adjustment also supported; see section.
	r!<>	Second frequency ratio (modulator waves only) to modulate (FM)
		to by wave or envelope, and/or a list of modulators given
		within the <> following the number if given. This list
		replaces any previous FM modulators set, and may be empty.
			The per-sample product of the modulator amplitudes is
		used to frequency-modulate the carrier(s), be they the final
		carrier(s) or in turn modulator(s) for one or more other
		carrier(s).
	a	Amplitude, where 1.0 gives a level of 0dB, which is the signal
		max of the output. For a modulator wave, this however simply
		adjusts the effect strength.
			Gradual value adjustment also supported; see section.
	a!<>	Second amplitude to modulate (AM) to by wave or envelope,
		and/or a list of modulators given within the <> following the
		number if given. This list replaces any previous AM modulators
		set, and may be empty.
			The per-sample product of the modulator amplitudes is
		used to amplitude-modulate the carrier(s), be they the final
		carrier(s) or in turn modulator(s) for one or more other
		carrier(s).
	p	Set the beginning phase of the wave. For example, p(3/4) will
		make a sine or triangle wave begin at its "bottom". This is
		mostly used where wanted for waves used by f!/r! or a!.
	p!<>	A list of modulator (PM) operators follow within the <>. This
		list replaces any previous PM modulators set, and may be empty.
			The per-sample sum of the modulator amplitudes is used
		to phase-modulate the carrier(s), be they the final carrier(s)
		or in turn modulator(s) for one or more other carrier(s).
	s	Silent time before playing, time in seconds.
			Works like adding a delay, except it only affects this
		operator.
	w	Set (change) wave type (sin, srs, tri, sqr, saw).

P:
	Set the panning (left-right "balance") of the voice associated with
	the present operator(s), affecting the mixing of all its operators.
	Value ranges 0 (left) to 1 (right). Default is 0.5 (center).
			Gradual value adjustment also supported; see section.

The following other modifiers are supported:
	\	Delay next step and all following ones, time in seconds.
		Alternatively, \t will delay by the time of the previous
		step.
	|	Add (independently of \) just enough delay to make the next
		step(s) begin at the expiration of all that preceeds it,
		though \ may further delay it.

Gradual value adjustment:
	Some parameters are noted to support this. Instead of typing the
	value directly, the following sub-parameters are specified within []
	(square brackets):
	v	Target value.
	t	Time to reach target value.
	c	Character of gradual change; either lin, exp or log. (exp and
		log are ear-tuned approximations designed to sound natural,
		and symmetric to one another. these approximations allow
		definite, finite timing, whereas a real exponential
		calculation wouldn't)

Composite steps:
	Writing a ";" (on new line or same line) after a step will allow
	specifying new arguments to apply at the end of the previous duration;
	this can be repeated.
		This makes it possible to write a sequence of steps as if a
	single "composite step".

Labels and referencing:
	Any operator when specified may be prefixed by "'label " in order to
	define a label for it, where the label is anything followed by
	whitespace; thereafter the label may be referenced as ":label",
	allowing future changes to be placed at any later point in the script.
